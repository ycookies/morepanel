<?php

namespace App\DummyNamespace\Models;

use Dcat\Admin\Models\Menu;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

class Menus extends Menu
{
    protected $table = 'DummyApp_menu';

    public static $app_name = 'DummyApp';

        protected function init()
        {
            $connection = config(Menus::$app_name.'.database.connection') ?: config('database.default');

            $this->setConnection($connection);

            $this->setTable(config(Menus::$app_name.'.database.menu_table'));
        }

        /**
         * A Menu belongs to many roles.
         *
         * @return BelongsToMany
         */
        public function roles(): BelongsToMany
        {
            $pivotTable = config(Menus::$app_name.'.database.role_menu_table');

            $relatedModel = config(Menus::$app_name.'.database.roles_model');

            return $this->belongsToMany($relatedModel, $pivotTable, 'menu_id', 'role_id')->withTimestamps();
        }

        public function permissions(): BelongsToMany
        {
            $pivotTable = config(Menus::$app_name.'.database.permission_menu_table');

            $relatedModel = config(Menus::$app_name.'.database.permissions_model');

            return $this->belongsToMany($relatedModel, $pivotTable, 'menu_id', 'permission_id')->withTimestamps();
        }

        /**
         * Get all elements.
         *
         * @param  bool  $force
         * @return static[]|\Illuminate\Support\Collection
         */
        public function allNodes(bool $force = false)
        {
            if ($force || $this->queryCallbacks) {
                return $this->fetchAll();
            }

            return $this->remember(function () {
                return $this->fetchAll();
            });
        }

        /**
         * Fetch all elements.
         *
         * @return static[]|\Illuminate\Support\Collection
         */
        public function fetchAll()
        {
            return $this->withQuery(function ($query) {
                if (static::withPermission()) {
                    $query = $query->with('permissions');
                }

                return $query->with('roles');
            })->treeAllNodes();
        }

        /**
         * Determine if enable menu bind permission.
         *
         * @return bool
         */
        public static function withPermission()
        {
            return config(Menus::$app_name.'.menu.bind_permission') && config(Menus::$app_name.'.permission.enable');
        }

        /**
         * Determine if enable menu bind role.
         *
         * @return bool
         */
        public static function withRole()
        {
            return (bool) config(Menus::$app_name.'.permission.enable');
        }

        /**
         * Detach models from the relationship.
         *
         * @return void
         */
        protected static function boot()
        {
            static::treeBoot();

            static::deleting(function ($model) {
                $model->roles()->detach();
                $model->permissions()->detach();

                $model->flushCache();
            });

            static::saved(function ($model) {
                $model->flushCache();
            });
        }
}
